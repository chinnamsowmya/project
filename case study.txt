stream operations
-------------------------

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
public class StreamOperationsExercise {
    public static void main(String[] args) {
        List<Player> player = Arrays.asList(new Player("Sachin",400,20000,400,"India"),new Player("Raina",423,21000,420,"England"),new Player("Kohli",425,22000,425,"India"),new Player("Rohit",300,15000,500,"India"),new Player("Dhoni",200,12000,250,"India"));

        displayPlayers(player);
        displayPlayerForCountry(player,"India");
        getPlayerNames(player);
        getAverageRunsByCountry(player,"India");
        getPlayerNamesSorted(player);
        getPlayerCountry(player);
        findPlayer( player,"Raina");
        getMaxRunsPlayer(player);
        checkHighScorerByCountry(player ,"India");
    }
    public static void displayPlayers(List<Player> p) {
        List<String> playerName = p.stream().map(u->u.getPlayerName()).collect(Collectors.toList());
        System.out.println(playerName);
    }
    static void displayPlayerForCountry(List<Player> p,String country){
        List<String> playerNameByCountry =  p.stream()
                .filter(player ->
                        player.getCountry().equals(country) && player.getHighestScore() > 100
                ).map(u->u.getPlayerName()).collect(Collectors.toList());
        System.out.println(playerNameByCountry);
    }
    static void getPlayerNames(List<Player> p) {
        LinkedList<String> l1 = p.stream().filter(player -> player.getRuns() > 15000)
                .sorted((p1, p2) -> p2.getPlayerName().compareTo(p1.getPlayerName()))
                .map(
                        player -> player.getPlayerName()
                ).collect(Collectors.toCollection(LinkedList::new));
        System.out.println(l1);
    }
    public static void getAverageRunsByCountry(List<Player> p,String country) {
        List<Integer> getRuns = p.stream().filter(player -> {
                    return player.getCountry().equals(country);
                }).map(p1->p1.getRuns())
                .collect(Collectors.toList());
        OptionalDouble average = getRuns.stream().mapToInt(x1-> x1.intValue()).average();
        System.out.println("AverageRuns"+average);
    }
    public static void getPlayerNamesSorted(List<Player> p){
        List<String> l3 =p.stream()
                .sorted((p1, p2) -> p1.getCountry().compareTo(p2.getCountry())
                ).map(p1->p1.getPlayerName()).collect(Collectors.toList());
        System.out.println("by country  "+l3);
        List<String> l4 = p.stream().sorted(Comparator.comparingInt(Player::getMatchesPlayed))
                .map(p1->p1.getPlayerName()).collect(Collectors.toList());
        System.out.println("by match played  "+ l4);
    }
    public static void getPlayerCountry(List<Player> p){
        Map<Object, Object> countryNameWithPlayerName = p.stream().filter(player -> player.getMatchesPlayed() > 200).collect(Collectors.toMap(p1->p1.getPlayerName(),p1->p1.getCountry()));
        System.out.println(countryNameWithPlayerName);
    }
    public static void getMaxRunsPlayer(List<Player> p) {
        Player product1 = p.stream().max((p1,p2)->p1.getRuns() > p2.getRuns() ? 1:-1).get();
        System.out.println(product1);
    }
    public static void findPlayer(List<Player> p,String name) {
        String james = p.stream()
                .filter(customer -> name.equals(customer.getPlayerName())).map(p1->p1.getCountry())
                .findAny()
                .orElse(null);
        System.out.println(james);
    }
    public static void checkHighScorerByCountry(List<Player> p,String name) {
        boolean match = p.stream().anyMatch(s -> s.getRuns()>10000 && s.getCountry().equals(name)
        );
        System.out.println(match);

    }
}


===================================
stream collectors
--------------------------------

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class StreamCollectorsExercise {
    public static void main(String[] args) {
        List<Player> player = Arrays.asList(new Player("Sachin",400,20000,400,"India"),new Player("Raina",423,21000,420,"England"),new Player("Kohli",425,22000,425,"India"),new Player("Rohit",300,15000,500,"India"),new Player("Dhoni",200,12000,250,"India"));
        getPlayersByCountry(player);
        getPlayerNamesByCountry(player);
        getTotalPlayersByCountry(player);
        getTotalRunsByCountry(player);
        getMaxScoreByCountry(player);
        getPlayerNamesStringByCountry(player);




    }
    public static void getPlayersByCountry(List<Player> p){
        Map<Object, Object> countryNameWithPlayerName = p.stream().collect(Collectors.toMap(p1->p1.getPlayerName(),p1->p1.getCountry()));
        System.out.println(countryNameWithPlayerName);}
    public static void getPlayerNamesByCountry(List<Player> p){
        Map<Object, Object> countryNameWithPlayerName1 = p.stream().filter(player -> player.getMatchesPlayed() > 100).collect(Collectors.toMap(p1->p1.getPlayerName(),p1->p1.getCountry()));
        System.out.println(countryNameWithPlayerName1);}
    public static void getTotalPlayersByCountry(List<Player> p) {
        Map<String, Long>  n2 = p.stream().collect(Collectors.groupingBy(k -> k.getCountry(), Collectors.counting()));;
        System.out.println(n2);
    }
    public static void getTotalRunsByCountry(List<Player> p) {
        Map<String, Long>  n3 = p.stream().collect(Collectors.groupingBy(k -> k.getCountry(), Collectors.summingLong(p5->p5.getRuns())));
        System.out.println(n3);
    }
    public static void getMaxScoreByCountry(List<Player> p) {

        Map<Object, Object> highest = p.stream()
                .collect(Collectors.groupingBy(Player::getCountry, Collectors.groupingBy(Player::getRuns,TreeMap::new, Collectors.toList())))
                .entrySet().stream()
                .collect(Collectors.toMap(e -> e.getKey(),
                        e -> e.getValue().lastEntry().getKey()));
        System.out.println(highest);
    }
    public static void getPlayerNamesStringByCountry(List<Player> p){
        Map<Object, Object> countryNameWithPlayerName = p.stream().collect(Collectors.toMap(p1->p1.getCountry(),p1->p1.getPlayerName(), (s, a) -> s + ", " + a, LinkedHashMap::new));
        System.out.println(countryNameWithPlayerName);
    }

}